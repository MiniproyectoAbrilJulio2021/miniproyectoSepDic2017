Validar que cuando selecciones un teorema a demostrar se haya escojido primero el metodo de demostracion (NA)
Poner una columna en teorema que diga cual es el operador que une el lado derecho e izquierdo del teorema (no siempre es ==)(NA)
En teorema (enunciadoizq, enunciadoder) es unico hay que agregarle una coordenada con el operador que une los dos lados (NA)
Decir que (teoserializadoizq, teoserializadoder) es unico no hace falta (NA)
En metateorema decir (metateoserializadoizq, metateoserializadoder) es unico no es necesario (NA)
quitar ocultartrue de teorema y metateorema (L)
Si ya hay una demostracion incompleta de ese teorema para ese usuario, se debe preguntar si empezar una nueva o seguir la vieja (L)
Metodo directo es empezar de toda la formula y llegar a algun teo o axioma (L)
Partir de un lado de la ecuacion debe pedir que se clickee el lado de la equacion de donde vamos a empezar (L)
Al hacer el primer paso de la demostracion debe desaparecer la opcion de escojer el metodo de demostracion (L)
Debe haber un boton para eliminar el paso anterior (L)
Si se eliminan todos los pasos anteriores y se llega al inicio debe aparcer otra vez la opcion de escojer el metodo de dem (L)
En la lista de mis teoremas deben salir las instancias de demostraciones y la opcion de ver y borrar demostracion (NA)
El espacio donde se despliega la demostracion deberia ser un iframe para que no se recarguen la lista de teo en cada post (Ajax)
poner columna resuelto en la tabla solucion (L)
Despues de cada inferen el formulario continua lleno con los datos del paso anterior hay que limpiar a menos que la inferencia no sea valida
Al darle a demostrar deben aparecer los teoremas (no los axiomas) clickeables para escojer cual se va a demostrar (L)
Implementar el click al metateorema en la vista demostracion (L)
Poner el terminoManager al parse Term.g
El resuelve del usuario debe tener la lista de variables ligadas que debe usarse para invBD() en caso de logica de primer orden
En getMetateorema del MetateoremaManager has lo mismo que en teorema que deserealizas de una vez los lados derecho e izquierdos
(loginusuario,numeroteorema) debe ser unico en resuelve
en ifer.jsp se usa el resuelveManager dentro de un ciclo para ver si el teorema esta resuelto o no, esto es ineficiente
Si un teorema no admite un metodo de demostracion debe la opcion estar inabilitada
Has un orderby por numero de teorema a la lista de teoremas en los queries
La impresion de la instanciacion no esta en latex (L)
El resuelve manager tiene un monton de metodos que obtienen el resuelve de la bd y no setean el atributo demopendiente y teoremaTer
Si le das a inferir sin llenar el formulario no aparece nada en el lienzo de la demostracion
En usuarioManager-getAllTeoremas hay un for vacio, de hecho ese for es el que esta en PerfilController-misTeoremasView
Olvidate de la table predicado todos los constraints estan mal usa en su lugar la tabla termino
Categoriaid no deberia estar en la tabla teorema sino en resuelve
La entidad Categoria deberia ser debil de usuario y el doble for del jsp de misTeoremas se puede hacer en solo for
El query de getTeoremasByCategoria deberia tomar el resuelve del usuario con la categoria en cuestion y hacer join con teorema
Poner la columna esquema en metateorema (estudiar mas bien si se quita en teorema)
El getAllResuelveByUserWithSol de ResuelveManager puede hacerse con un joint y no con un for con un query por iteracion
El click sobre el operador para indicar el teorema a usar debe funcionar solo dando click al operador no a cualquier parte del term
Cuando se ponen en inferControler los simbolos de equiv clickeables a los teoremas la precedencia se debe obtener de bean general
Los metateoremas deberian poderse escoger tambien para empezar el metodo directo
En el controlador inferView se buscan todos los resuelves y en un for se filtran los que estan resuelto, haslo el filtro del query
Debes poner los condicionales que impidan ejecutar los controladores de los ajax sin tener una sesion activa
Cambiar el formato de "-" de lo que va en input teoremaInicial cuando empiezas de un lado por "@" prohibir @ en el num del teorema
Hay que arreglar el .equals de los const que verifique igualdad de precedencia asociatividad etc
Haciendo una segunda demostracion solo deben aparecer en la lista de teoremas a usar, axiomas y teoremas en que existe por lo menos una demostracion que no usa el teorema actual
cuando el teorema del hint tenga nombre poner antes del (id) su nombre, si no tiene nombre pon st o mt
Protege los teoremas demostrados de hackers con un if al inicio de inferir y retroceder para no hacer nada si la sol esta resuelta

identacion de los hint (listo)
verificar en casos de fortalecimeinto que finalice con implicacion correspondinte(operador)
los metodos fotalecimiento y debilitamiento ( reutilizar partir de un lado )
bug de bienvenido despues de agregar
paridad de expresiones
metateorema de asociatividad
Cambiar el nombre del paquete HowToDoJAva
Errores de parseo de la instanciacion no se reflejan en un mensaje en la vista
Revisar todas las validaciones de los formularios
Terminar la vista "mi perfil"
El arreglo leibniz se imprime con multiples z cuando partes de true y usas 3.3 con p:=true resultando true==true
Revisar que la ultima expresion de una solucion en la vista mis teoremas no se haga con toStringLabeled
Hacer archivos junit con ejemplos de derivaciones de teoremas mas comunes y de arreglo de leibniz
En la revision de los teoremas goal del metodo directo debe incluirse los metateoremas
En la lista de soluciones de misteoremas, poner un orderby por numero de solucion
Si demuestras una segunda vez un teorema aparece el mismo teorema como un teorema disponible, no debe ser asi
Cada vez que se hace un ajax deberia aparecer un simbolo de cargando en la mitad de la pantalla para saber que se esta esperando
El teorema a demostrar aparece en la lista de teoremas a usar en los metodos directo y partir de un lado de la ecuacion
Los teoremas a usar no basta filtrarlos en la lista de teoremas, sino que tambien hay validar que no se usen en el controlador
Arreglar los acordiones que sean idependiente pos categoria de teoremas

Al darle a demostrar deben aparecer los teoremas (no los axiomas) clickeables para escojer cual se va a demostrar (L)
no imprimir en la lista de teoremas una vez que se este demostrando, los teoremas bloqueados (L)
Despues de cada inferen el formulario continua lleno con los datos del paso anterior hay que limpiar a menos que la inferencia no sea valida
Implementar el uso de metateoremas en el campo Teorema a usar del formulario (L)
Capturar el termino leibniz del subrayado con el mouse (L)
Arreglar que cuando selecciones método directo y te pregunten de que teorema quieres empezar sea clickeable de la lista de teoremas el nombre o id y no su operador
Setear en BD como solucionado un teorema al momento de finalizar la demostración (L)
implementar que al seleccionar el método de debilitamiento y fortalecimiento se coloque como primera expresión de la demostración el antecedente y consecuente respectivamente del teorema
Validar que al seleccionar el método de debilitamiento y fortalecimiento que el teorema tenga operador que separa en dos lados el teorema y este sea ==> o <==
Validar que al seleccionar el método partir de un lado de la ecuación que el teorema tenga un operador que separa en dos lados el teorema y este sea ==
Si un teorema no admite un metodo de demostracion debe la opcion estar inabilitada
Has un orderby por numero de teorema a la lista de teoremas en los queries
Migrar al modelo de TypedTerm las soluciones (Federico)
En el hint debe aparecer el id del teorema usado y no todo el teorema
La impresion de la instanciacion no esta en latex
Imprimir el hint en formato <st 3.3 with p,q:=t1,t2 - lambda z.t3> o <mt 3.3 with p,q:=t1,t2 - lambda z.t3>
Poner el terminoManager al parse Term.g (Federico) (Estaba puesto, lo quite, ahora debo ponerlo otra vez)
Implementar que cuando se registre un nuevo usuario tenga todos los teoremas y axiomas del Gries cargados
Implementar eliminación y modificación de teoremas para el admin
Arreglar el acordion de teoremas, debe ser un acordion por categoría y no un acordion a todo
Colocar en BD una lista de variables por resuelve que corresponden a las variables abstraidas (Federico)
Activar el select para escojer el parse a usar en la vista ingresar teorema, que son lógica proposicional y esquema de primer orden
Terminar de imprimir en latex los paratodo y existe y la lógica de primer orden (Federico)
Imprimir y poner a funcionar el click encima de un alias en notación infija (Federico)


Mínima prioridad (Caprichos)

Ver lista de usuarios y filtrar por trimestre la lista
De un usuario listado ver la vista de mis teoremas de ese usuario y por lo tanto sus soluciones
Encriptar la clave de los usuarios con un Hash en la BD (L)
generar la solución de los metatoremas en función de la solución del teorema (L)
Implementar visualmente el primer paso de asumir el antecedente donde se imprime de primero la hipótesis en el formato Hip:Enunciado y luego se debe escoger el método de demostración del consecuente con una identación a derecha
