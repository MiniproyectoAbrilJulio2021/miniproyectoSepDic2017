package com.howtodoinjava.entity;
// Generated Mar 20, 2017 12:50:11 PM by Hibernate Tools 3.2.1.GA

import com.howtodoinjava.lambdacalculo.PasoInferencia;
import com.howtodoinjava.lambdacalculo.Term;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import org.springframework.util.SerializationUtils;

/**
 * Solucion generated by hbm2java
 */
public class Solucion implements java.io.Serializable {

    @Id
    @Column(name = "id")
    @GeneratedValue( strategy = GenerationType.SEQUENCE, generator = "solucion_id_seq")
    @SequenceGenerator(name = "solucion_id_seq", sequenceName = "solucion_id_seq")
    private int id;
    private byte[] arregloSerializado;
    private List<PasoInferencia> arregloInferencias = new ArrayList<PasoInferencia>();
    private Resuelve resuelve;
    private boolean resuelto;

    public Solucion() {
    }

    public void setResuelto(boolean resuelto) {
        this.resuelto = resuelto;
    }

    public boolean isResuelto() {
        return resuelto;
    }

    public Solucion(PasoInferencia paso) {
        this.arregloInferencias.add(paso);
        this.resuelto = false;
//        this.arregloSerializado = SerializationUtils.serialize(this.arregloInferencias);
        this.serialize();
//        this.deserialize();

    }

    public Solucion(Resuelve resuelve, PasoInferencia paso) {
        this.resuelve = resuelve;
        this.resuelto = false;
        this.arregloInferencias.add(paso);
//        this.arregloSerializado = SerializationUtils.serialize(this.arregloInferencias);
        this.serialize();
//        this.deserialize();

    }
    
    public Solucion(Resuelve resuelve, boolean resuelto, PasoInferencia paso) {
        this.resuelve = resuelve;
        this.resuelto = resuelto;
        this.arregloInferencias.add(paso);
//        this.arregloSerializado = SerializationUtils.serialize(this.arregloInferencias);
        this.serialize();
//        this.deserialize();

    }
    

    public void setId(int id) {
        this.id = id;
    }

    public void setArregloSerializado(byte[] arregloSerializado) {
        this.arregloSerializado = arregloSerializado;
    }

    public void setArregloInferencias(List<PasoInferencia> arregloInferencias) {
        this.arregloInferencias = arregloInferencias;
//        this.arregloSerializado = SerializationUtils.serialize(arregloInferencias);
        this.serialize();
//        this.deserialize();
    }

    public void setResuelve(Resuelve resuelve) {
        this.resuelve = resuelve;
    }

    public int getId() {
        return id;
    }

    public byte[] getArregloSerializado() {
        return arregloSerializado;
    }

    public List<PasoInferencia> getArregloInferencias() {
        return arregloInferencias;
    }

    public Resuelve getResuelve() {
        return resuelve;
    }

    public void addArregloInferencias(PasoInferencia paso) {
        this.deserialize();
        List<PasoInferencia> newArray;// = new ArrayList<PasoInferencia>();
        newArray = getArregloInferencias();
        newArray.add(paso);
        setArregloInferencias(newArray);
        this.serialize();
    }

    public void serialize() {
//        this.arregloInferencias.add(paso);
//        this.arregloSerializado = SerializationUtils.serialize(this.arregloInferencias);
        List<byte[]> newArray = new ArrayList<byte[]>();
        for (PasoInferencia x : this.getArregloInferencias()) {
            newArray.add(SerializationUtils.serialize(x.getExpresion()));
            newArray.add(SerializationUtils.serialize(x.getTeoIzq()));
            newArray.add(SerializationUtils.serialize(x.getTeoDer()));
            newArray.add(SerializationUtils.serialize(x.getLeibniz()));
            newArray.add(SerializationUtils.serialize(x.getInstancia()));
            newArray.add(SerializationUtils.serialize(x.getResult()));            
        }

        this.arregloSerializado = SerializationUtils.serialize(newArray);

    }

    public void deserialize() {
        List<byte[]> theArray = new ArrayList<byte[]>();
        theArray = (List<byte[]>) SerializationUtils.deserialize(this.arregloSerializado);
        List<PasoInferencia> newArray = new ArrayList<PasoInferencia>();
        
        Iterator<byte[]> solIter = theArray.iterator();
        while (solIter.hasNext())  {
            PasoInferencia paso = new PasoInferencia();
            paso.setExpresion((Term) SerializationUtils.deserialize(solIter.next()));
            paso.setTeoIzq((Term) SerializationUtils.deserialize(solIter.next()));
            paso.setTeoDer((Term) SerializationUtils.deserialize(solIter.next()));
            paso.setLeibniz((Term) SerializationUtils.deserialize(solIter.next()));
            paso.setInstancia((String) SerializationUtils.deserialize(solIter.next()));
            paso.setResult((Term) SerializationUtils.deserialize(solIter.next()));            
            newArray.add(paso);
        }
        this.arregloInferencias = newArray;

    }

    public int retrocederPaso(){
    
            int tam = this.arregloInferencias.size();
            this.deserialize();
            if(tam>0){
                this.arregloInferencias.remove(tam - 1);
            }
            
            this.serialize();            
         
            return tam;
    }
}
